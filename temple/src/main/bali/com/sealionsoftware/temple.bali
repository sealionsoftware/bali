import bali.Executable
import bali.Boolean
import bali.String
import bali.Exception
import bali.Integer
import bali.RuntimeException
import bali.Serializer
import bali.collection.Map
import bali.collection.Entry
import bali.collection.Collection
import bali.collection.HashMap
import bali.net.Socket
import bali.net.IPAddress
import bali.net.ServerSocket
import bali.net.SocketMonitor
import bali.file.File
import bali.file.Directory
import bali.monitor.ConnectionMonitor
import bali.server.HttpHandler
import bali.server.HttpResponse
import bali.server.HttpRequest

import com.sealionsoftware.storage.BeanStore
import com.sealionsoftware.storage.FileBeanStore

import com.sealionsoftware.json.JSONSerializer

constant String@ CONFIG_FILE_NAME = "temple.json"

interface ProtocolHandler {
	declare handle(Socket connection)
}

object StubRouter implements HttpHandler {

	method HttpResponse handle(HttpRequest request){
		return new HttpResponse(
			status: 404,
			headers: new HashMap(),
			body: "Not Found"
		);
	}
}

object HttpProtocolHandler(HttpHandler router) implements ProtocolHandler {

	method handle(Socket connection){

		CONSOLE << "Receiving Request";

		String? requestLine = << connection;
		if (?requestLine){

			Collection[String] requestLineElements = requestLine / " ";
			if (requestLineElements.size() != 3){
				throw new RuntimeException("The http request line was invalid as it had " + NUMBER_FACTORY.format(requestLineElements.size()) + " elements");
			}

			HttpRequest request = new HttpRequest(
				httpMethod: requestLineElements#1,
				path: requestLineElements#2,
				headers: new HashMap()
			);

			for (String header : connection){
				if (header.size() > 0){
					break;
				}
                Collection[String] headerElements = header / ": ";
                Integer headerElementSize = headerElements.size();
                if (headerElementSize != 2){
                    throw new RuntimeException("The http header is invalid as it had $headerElementSize elements");
                }
                request.headers.put(headerElements#1, headerElements#2);
			}

	        HttpResponse response = router.handle(request);
	        connection << "HTTP/1.1 " + NUMBER_FACTORY.format(response.status) + " OK";

	        for (Entry[String, String] entry : response.headers){
	            connection << entry.key + ": " + entry.value;
	        }

	        connection << "";
	        String? body = response.body;
	        if (?body){
	            connection << body;
	        }

	        CONSOLE << "Response Completed";
        }
	}
}

object TempleServer implements Executable {

	field BeanStore[ServerConfiguration] configurationStore
	field ServerConfiguration configuration

	method execute {

		CONSOLE << "Starting Temple";

		loadConfiguration();
		setUpApplications();
		startServer();

		CONSOLE << "Temple Exiting";
	}

	method loadConfiguration {

		Directory configDirectory = getConfigDirectory();
		File? configFile = configDirectory.getFile(CONFIG_FILE_NAME);

		Serializer[ServerConfiguration] configurationSerializer = new JSONSerializer();

		if (?configFile){
			configurationStore = new FileBeanStore(configFile, configurationSerializer);
			configuration = configurationStore.load();
		} else {
			File configFile = configDirectory.createFile(CONFIG_FILE_NAME);
			configurationStore = new FileBeanStore(configFile, configurationSerializer);
			configuration = new ServerConfiguration(new HashMap(),new HashMap(), new HashMap());
			configurationStore.save(configuration);
		}

    }

    method setUpApplications {

		for (Entry[String, ResourceConfiguration] resource : configuration.resources){
			CONSOLE << "Loading resource " + resource.key;
		}

		for (Entry[String, ResourceConfiguration] webApplication : configuration.webApplications){
        	CONSOLE << "Loading application " + webApplication.key;
        }
    }

    method startServer {

    	ServerSocket port = NETWORK_MANAGER.openPort(8080);
    	ConnectionMonitor[Socket]@ monitor = new SocketMonitor(port);

    	while (true){

    		monitor.waitForConnection();
            run {

    			Socket connection = monitor.getConnection();
    			ProtocolHandler handler = new HttpProtocolHandler(new StubRouter());

    			try {
    				handler.handle(connection);
    			} catch (Exception e){
    				CONSOLE << "Error Processing Request: " + e.getMessage();
    			}
    			connection.close();
    		}
    	}

    	port.close();
    }

	method Directory getConfigDirectory {
		Directory home = FILE_MANAGER.getHomeDirectory();
		return home.createDirectory(".temple");
	}
}

bean ServerConfiguration {

	property Map[String, ResourceConfiguration] webApplications
	property Map[IPAddress, Map[Integer, String]] bindings
	property Map[String, ResourceConfiguration] resources

}

bean ResourceConfiguration {

	property String groupId
	property String artifactId
	property String versionId

	property Map[String, String] parameters
	property Map[String, String] resources

}
