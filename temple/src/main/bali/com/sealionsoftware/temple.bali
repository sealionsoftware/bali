import bali.Executable
import bali.Boolean
import bali.String
import bali.Exception
import bali.Integer
import bali.Serializer
import bali.type.Type
import bali.collection.Map
import bali.collection.Entry
import bali.collection.Queue
import bali.collection.Collection
import bali.collection.HashMap
import bali.monitor.BlockingQueue
import bali.net.Socket
import bali.net.IPAddress
import bali.net.ServerSocket
import bali.net.SocketMonitor
import bali.file.File
import bali.file.Directory
import bali.monitor.ConnectionMonitor
import bali.monitor.ResourcePool
import bali.monitor.DisposableResourcePool
import bali.loader.ModuleTypeLoader
import bali.loader.MavenModuleTypeLoader

import bali.server.HttpHandler
import bali.server.HttpResponse
import bali.server.HttpRequest
import bali.server.WebApplication

import com.sealionsoftware.storage.BeanStore
import com.sealionsoftware.storage.FileBeanStore

import com.sealionsoftware.json.JSONSerializer

constant String@ CONFIG_FILE_NAME = "temple.json"

interface ProtocolHandler {
	declare handle(Socket connection)
}

object HttpProtocolHandler(HttpHandler router) implements ProtocolHandler {

	method handle(Socket connection){

		String? requestLine = << connection;
		if (?requestLine){

			Collection[String] requestLineElements = requestLine / " ";
			Integer requestLineElementsSize = requestLineElements.size();
			if (requestLineElementsSize != 3){
				throw new Exception("The http request line was invalid as it had $requestLineElementsSize elements");
			}

			String path = requestLineElements#2;
			HttpRequest request = new HttpRequest(
				httpMethod: requestLineElements#1,
				path: path,
				headers: new HashMap()
			);

			CONSOLE << "Receiving Request for $path";

			for (String header : connection){
				if (header.size() > 0){
					break;
				}
                Collection[String] headerElements = header / ": ";
                Integer headerElementSize = headerElements.size();
                if (headerElementSize != 2){
                    throw new Exception("The http header is invalid as it had $headerElementSize elements");
                }
                request.headers.put(headerElements#1, headerElements#2);
			}

			//TODO: request body

	        HttpResponse response = router.handle(request);
	        connection << "HTTP/1.1 " + VALUE_FORMATTER.format(response.status) + " OK";

	        for (Entry[String, String] entry : response.headers){
	            connection << entry.key + ": " + entry.value;
	        }

	        connection << "";
	        String? body = response.body;
	        if (?body){
	            connection << body;
	        }

	        CONSOLE << "Response Completed";
        }
	}
}

object TempleServer implements Executable {

	field BeanStore[ServerConfiguration] configurationStore
	field ServerConfiguration configuration

//	field ModuleLoader[Resource] resourceLoader = new MavenModuleLoader()
	field ModuleTypeLoader typeLoader

//	field Map[String, Resource] resources = new HashMap()
	field Map[String, ResourcePool[WebApplication]@] webApplications = new HashMap()

	method execute {

		CONSOLE << "Starting Temple";

		loadConfiguration();
		setUpApplications();
		startServer();

		CONSOLE << "Server started";

	}

	method loadConfiguration {

		Directory configDirectory = getConfigDirectory();
		File? configFile = configDirectory.getFile(CONFIG_FILE_NAME);

		Serializer[ServerConfiguration] configurationSerializer = new JSONSerializer();

		if (?configFile){
			configurationStore = new FileBeanStore(configFile, configurationSerializer);
			configuration = configurationStore.load();
		} else {
			File configFile = configDirectory.createFile(CONFIG_FILE_NAME);
			configurationStore = new FileBeanStore(configFile, configurationSerializer);
			configuration = new ServerConfiguration(new HashMap(), new HashMap(), new HashMap());
			configurationStore.save(configuration);
		}

    }

    method setUpApplications {

        typeLoader = new MavenModuleTypeLoader();
        typeLoader.initialise();

		for (Entry[String, ResourceConfiguration] entry : configuration.resources){
			CONSOLE << "Loading resource " + entry.key;
		}

		for (Entry[String, ResourceConfiguration] entry : configuration.webApplications){
        	CONSOLE << "Loading application " + entry.key;

        	ResourceConfiguration webAppConfig = entry.value;
        	String@ coordinates = webAppConfig.groupId + ":" + webAppConfig.artifactId + ":bar:" + webAppConfig.versionId;
        	Type@? moduleType = typeLoader.load(coordinates);
        	if(?moduleType){
        	    ResourcePool[WebApplication]@ pool = new DisposableResourcePool(moduleType);
        	    pool.initialise();
                webApplications.put(entry.key, pool);
        	} else {
        	    throw new Exception("Could not load module $coordinates");
        	}
        }
    }

    method startServer {

        for (Entry[IPAddress@, Map[Integer@, String@]] addressEntry : configuration.bindings){

            IPAddress@ address = addressEntry.key;
            for (Entry[Integer@, String@] portEntry : addressEntry.value){
                Integer@ portNumber = portEntry.key;
                String@ applicationName = portEntry.value;

                ResourcePool[WebApplication]@? pool = webApplications.get(applicationName);

                if (?pool) run {

                    CONSOLE << "Binding $applicationName to $address:$portNumber";

                    ServerSocket port = NETWORK_MANAGER.openPort(portNumber);
                    ConnectionMonitor[Socket]@ monitor = new SocketMonitor(port);

                    while (true){

                        CONSOLE << "Waiting for connection";
                        monitor.waitForConnection();

                        run {

                            WebApplication? application = pool.getResource();
                            if(?application){
                                Socket connection = monitor.getConnection();
                                ProtocolHandler handler = new HttpProtocolHandler(application);
                                try {
                                    handler.handle(connection);
                                } catch (Exception e){
                                    CONSOLE << "Error Processing Request: " + e.message;
                                }
                                connection.close();
                            }
                        }
                    }

                    port.close();

                } else {
                    CONSOLE << "No application named $applicationName to bind to address";
                }
            }
        }
    }

	method Directory getConfigDirectory {
		Directory home = FILE_MANAGER.getHomeDirectory();
		return home.createDirectory(".temple");
	}
}

bean ServerConfiguration {

	property Map[String@, ResourceConfiguration] webApplications
	property Map[IPAddress@, Map[Integer@, String@]] bindings
	property Map[String@, ResourceConfiguration] resources

}

bean ResourceConfiguration {

	property String@ groupId
	property String@ artifactId
	property String@ versionId

	property Map[String@, String@] parameters
	property Map[String@, String@] resources

}
