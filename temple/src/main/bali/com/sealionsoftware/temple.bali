import bali.Executable
import bali.Boolean
import bali.String
import bali.Exception
import bali.io.Socket
import bali.io.ServerSocket
import bali.io.SocketMonitor
import bali.Count
import bali.Counter
import bali.monitor.ConnectionMonitor
import bali.Integer

import bali.server.HttpHandler

interface ProtocolHandler {

	declare handle(Socket connection)
}

object StubRouter implements HttpHandler {

	method HttpResponse handle(HttpRequest request){
		return new HttpResponse(
			status: 200,
			body: "Hello World"
		);
	}

}

object HttpProtocolHandler(HttpHandler router) implements ProtocolHandler {

	method handle(Socket connection){

		CONSOLE << "Receiving Request";



		String header = << connection;
		if (?header){

			List[String] requestLineElements = header.split(" ");
			if (requestLineElements.size() != 3){
				throw new RuntimeException("The http header line was invalid as it had " + NUMBER_FACTORY.format(requestLineElements.size()) + " elements");
			}

			HttpRequest request = new HttpRequest(
				httpMethod: headerElements#1,
				path: headerElements#2,
				headers: new HashMap()
			);

			while (true) {
                String? read = << connection;
                if (?read & read.length() > 0){
					List[String] headerElements = header.split(": ");
					if (headerElements.size() != 2){
                    	throw new RuntimeException("The http header is invalid as it had " + NUMBER_FACTORY.format(headerElements.size()) + " elements");
                    }
					request.headers.put(headerElements#1, headerElements#2);
                } else {
                    break;
                }
            }
		} else {
			return;
		}

        HttpResponse response = router.handle(request);


        connection << "HTTP/1.1 " + NUMBER_FACTORY.format(response.status) + " OK";

        for (Entry[String, String] entry : response.headers){
            connection << entry.key + ": " + entry.value;
        }

        connection << "";
        connection << response.body;

        CONSOLE << "Response Completed";
	}

}

object TempleServer implements Executable {

	method execute {

		CONSOLE << "Starting Temple";
		ServerSocket port = NETWORK_MANAGER.openPort(8080);
		ConnectionMonitor[Socket]@ monitor = new SocketMonitor(port);
		Count count = new Counter();

		while (true){

			monitor.waitForConnection();
			Integer@ requestNo = ++count;

			run {

				Socket connection = monitor.getConnection();
				ProtocolHandler handler = new HttpProtocolHandler(new StubRouter());

				try {
					handler.handle(connection);
				} catch (Exception e){
					CONSOLE << "Error Processing Request: " + e.getMessage();
				}
				connection.close();
			}
		}

		port.close();
		CONSOLE << "Temple Exiting";
	}

}

